import Head from 'next/head';
import { useRouter } from 'next/router';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { type TopTracksData } from '../api/[id]/top-tracks';
import { Track } from '@/lib/spotify';
import { Header } from '@/components/Header';
import { useSession } from 'next-auth/react';
import {
  CreatePlaylistResponse,
  type CreatePlaylistRequest,
} from '../api/create-playlist';
import {
  ActionIcon,
  Avatar,
  Container,
  Divider,
  Group,
  rem,
  Stack,
  Title,
  Tooltip,
} from '@mantine/core';
import { notifications } from '@mantine/notifications';
import { IconDeviceFloppy } from '@tabler/icons-react';

const getTopTracks = async (id: string): Promise<TopTracksData> => {
  const resp = await fetch(`/api/${id}/top-tracks`);
  if (!resp.ok) {
    throw new Error(await resp.text());
  }
  return resp.json();
};

const PlaylistCreator = ({ tracks }: { tracks: Track[] }) => {
  const session = useSession();

  const create = useCallback(() => {
    if (tracks.length === 0) {
      return;
    }
    const request: CreatePlaylistRequest = {
      trackUris: tracks.map((track) => track.uri),
    };
    fetch('/api/create-playlist', {
      method: 'POST',
      body: JSON.stringify(request),
      headers: { 'content-type': 'application/json' },
    }).then(async (resp) => {
      if (resp.ok) {
        const data: CreatePlaylistResponse = await resp.json();
        notifications.show({
          title: 'プレイリストを作成しました!',
          message: `${data.playlist.name}という名前で追加しました`,
        });
      }
    });
  }, [tracks]);

  return (
    <Tooltip label="プレイリストを作成する">
      <ActionIcon
        onClick={create}
        disabled={session === null}
        variant="filled"
        color="teal"
      >
        <IconDeviceFloppy />
      </ActionIcon>
    </Tooltip>
  );
};

export default function Home() {
  const router = useRouter();
  const [resp, setResp] = useState<TopTracksData | null>(null);

  useEffect(() => {
    const { id } = router.query;
    if (typeof id === 'string') {
      getTopTracks(id).then(setResp);
    }
  }, [router.query]);

  const topTracks = useMemo(() => resp?.topTracks ?? [], [resp]);
  const user = useMemo(() => resp?.user ?? null, [resp]);

  return (
    <>
      <Head>
        <title>Kokage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Container my="sm">
          <Stack>
            <Group position="apart" mx={rem(10)}>
              <Group>
                <Avatar src={user?.image} />
                <Title fz="md">{user?.name}</Title>
              </Group>
              <PlaylistCreator tracks={topTracks} />
            </Group>
            <Divider />
            {topTracks.map((track) => (
              <iframe
                key={track.id}
                style={{ borderRadius: '12px' }}
                src={`https://open.spotify.com/embed/track/${track.id}?utm_source=generator`}
                width="100%"
                height="152"
                frameBorder="0"
                allowFullScreen
                allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                loading="lazy"
              ></iframe>
            ))}
          </Stack>
        </Container>
      </main>
    </>
  );
}
