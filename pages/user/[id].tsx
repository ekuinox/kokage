import Head from 'next/head';
import { useCallback, useState } from 'react';
import { useSession } from 'next-auth/react';
import {
  ActionIcon,
  Anchor,
  Avatar,
  Container,
  Divider,
  Group,
  rem,
  SegmentedControl,
  Stack,
  Text,
  Title,
  Tooltip,
} from '@mantine/core';
import { notifications } from '@mantine/notifications';
import { IconDeviceFloppy } from '@tabler/icons-react';
import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import { Header } from '@/components/Header';
import { getClient } from '@/lib';
import { Track } from '@/lib/spotify';
import {
  CreatePlaylistResponse,
  type CreatePlaylistRequest,
} from '../api/create-playlist';
import dayjs from 'dayjs';
import { upperFirst } from '@mantine/hooks';
import Link from 'next/link';
import { UserTopTracks, UserTopTracksProps } from '@/components/UserTopTracks';

type UserPageProps = UserTopTracksProps;

export const getServerSideProps: GetServerSideProps<UserPageProps> = async (
  context
) => {
  const id = context.params?.id;

  if (typeof id !== 'string') {
    return {
      notFound: true,
    };
  }

  const [, client] = await getClient(id).catch(() => [null, null]);
  if (client == null) {
    return {
      notFound: true,
    };
  }

  const profile = await client.getUserProfile(id);
  const profileImage = profile.images.sort(
    (a, b) => b.width ?? 0 - (a.width ?? 0)
  )[0].url;
  const profileUrl = profile.external_urls['spotify'];

  const timeRanges = ['short', 'medium', 'long'] as const;
  const [short, medium, long] = await Promise.all(
    timeRanges.map((timeRange) =>
      client.getTopTracks({ limit: 5, offset: 0, timeRange }).then((r) => {
        if ('error' in r) {
          throw new Error(`Error with ${timeRange}`);
        }
        return r.items;
      })
    )
  );

  return {
    props: {
      topTracks: {
        short,
        medium,
        long,
      },
      user: {
        id,
        name: profile.display_name,
        image: profileImage,
        url: profileUrl,
      },
    },
  };
};

export default function UserPage({
  user,
  topTracks,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <title>Kokage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Container my="sm">
          <UserTopTracks user={user} topTracks={topTracks} />
        </Container>
      </main>
    </>
  );
}
