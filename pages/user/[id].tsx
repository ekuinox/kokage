import Head from 'next/head';
import { useCallback, useState } from 'react';
import { useSession } from 'next-auth/react';
import {
  ActionIcon,
  Avatar,
  Container,
  Divider,
  Group,
  rem,
  SegmentedControl,
  Stack,
  Title,
  Tooltip,
} from '@mantine/core';
import { notifications } from '@mantine/notifications';
import { IconDeviceFloppy } from '@tabler/icons-react';
import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import { Header } from '@/components/Header';
import { getClient } from '@/lib';
import { Track } from '@/lib/spotify';
import {
  CreatePlaylistResponse,
  type CreatePlaylistRequest,
} from '../api/create-playlist';

interface UserPageProps {
  topTracks: {
    long: Track[];
    short: Track[];
    medium: Track[];
  };
  user: {
    name: string;
    id: string;
    image: string;
  };
}

export const getServerSideProps: GetServerSideProps<UserPageProps> = async (
  context
) => {
  const id = context.params?.id;

  if (typeof id !== 'string') {
    throw new Error(`Error id not found`);
  }

  const [, client] = await getClient(id);
  const profile = await client.getUserProfile(id);
  const profileImage = profile.images.sort(
    (a, b) => b.width ?? 0 - (a.width ?? 0)
  )[0].url;

  const timeRanges = ['short', 'medium', 'long'] as const;
  const [short, medium, long] = await Promise.all(
    timeRanges.map((timeRange) =>
      client.getTopTracks({ limit: 5, offset: 0, timeRange }).then((r) => {
        if ('error' in r) {
          throw new Error(`Error with ${timeRange}`);
        }
        return r.items;
      })
    )
  );

  return {
    props: {
      topTracks: {
        short,
        medium,
        long,
      },
      user: {
        id,
        name: profile.display_name,
        image: profileImage,
      },
    },
  };
};

const PlaylistCreator = ({ tracks }: { tracks: Track[] }) => {
  const session = useSession();

  const create = useCallback(() => {
    if (tracks.length === 0) {
      return;
    }
    const request: CreatePlaylistRequest = {
      trackUris: tracks.map((track) => track.uri),
    };
    fetch('/api/create-playlist', {
      method: 'POST',
      body: JSON.stringify(request),
      headers: { 'content-type': 'application/json' },
    }).then(async (resp) => {
      if (resp.ok) {
        const data: CreatePlaylistResponse = await resp.json();
        notifications.show({
          title: 'プレイリストを作成しました!',
          message: `${data.playlist.name}という名前で追加しました`,
        });
      }
    });
  }, [tracks]);

  return (
    <Tooltip label="プレイリストを作成する">
      <ActionIcon
        onClick={create}
        disabled={session === null}
        variant="filled"
        color="teal"
      >
        <IconDeviceFloppy />
      </ActionIcon>
    </Tooltip>
  );
};

export default function UserPage({
  user,
  topTracks,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [term, setTerm] = useState<keyof typeof topTracks>('short');

  return (
    <>
      <Head>
        <title>Kokage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Container my="sm">
          <Stack>
            <Group position="apart" mx={rem(10)}>
              <Group>
                <Avatar src={user.image} />
                <Title fz="md">{user.name}</Title>
              </Group>
              <SegmentedControl
                data={[
                  { label: 'Short', value: 'short' },
                  { label: 'Medium', value: 'medium' },
                  { label: 'Long', value: 'long' },
                ]}
                value={term}
                onChange={(value) => setTerm(value as typeof term)}
              />
              <PlaylistCreator tracks={topTracks[term]} />
            </Group>
            <Divider />
            {topTracks[term].map((track) => (
              <iframe
                key={track.id}
                src={`https://open.spotify.com/embed/track/${track.id}`}
                height="80"
                frameBorder="0"
                allowFullScreen
                allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                loading="lazy"
              ></iframe>
            ))}
          </Stack>
        </Container>
      </main>
    </>
  );
}
